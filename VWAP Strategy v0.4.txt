//@version=5
strategy("VWAP based strategy v0.4", overlay=true, initial_capital=1000, default_qty_type=strategy.cash, default_qty_value=100, currency = currency.USD, pyramiding=999)


//Inputs
botDirection = input.string("Long & Short", "Bot Direction", ["Long","Short","Long & Short"], group = "General settings")
LongTradesActive = false, ShortTradesActive = false
if botDirection == "Long & Short"
    LongTradesActive := true, ShortTradesActive := true
if botDirection == "Long"
    LongTradesActive := true , ShortTradesActive := false
if botDirection == "Short"
    LongTradesActive := false , ShortTradesActive := true
tp = input.float(title="Take Profit %",  defval=5, group = "General settings", minval=0.0, step= 0.1)/100
sl = input.float(title="Stop Loss % (0 = Disabled)",  defval=0, group = "General settings", minval=0.0, step= 0.1)/100
if sl == 0
    sl := 100
isDCAactive = input.bool(title="DCA Active", defval=true, group = "General settings")
uuid = input(title="Enter your UUID", defval='', group="General settings", tooltip = "Write the following in the Alert Message box when setting up bot alerts \n\n{{strategy.order.alert_message}}")

upper_band_percentage = input.float(title="vWAP Upper Band %", defval = 3, group = "VWAP settings", minval=0.0, step= 0.1)/100
lower_band_percentage = input.float(title="VWAP Lower Band %", defval = 3, group = "VWAP settings", minval=0.0, step= 0.1)/100
vwap_period = input.int(title="VWAP Period",  defval=14, group = "VWAP settings", minval=0)
vwap_timeframe = input.timeframe(title="VWAP Timeframe",  defval="120", group = "VWAP settings")
pullback_percentage = input.float(title="Pullback %", defval = 1, group = "Pullback settings", minval=0.01, step= 0.01)/100
PBperiod = input.int(title="Lookback Period", defval = 1, group = "Pullback settings", minval=1, step= 1, tooltip = "Retracement loockback period")
//pullback_timeframe = input.timeframe(title="Pullback Timeframe",  defval="30", group = "Pullback settings")
PBcloseStillAboveShortBand = input.bool(title="Pullback close still above VWAP upperband for short entry", defval=true, group = "Pullback settings")
PBcloseStillBelowLongBand = input.bool(title="Pullback close still below VWAP lowerband for long entry", defval=true, group = "Pullback settings")

baseOrderAmount = input.float(100, title='Base Order Size', minval=0.0, step= 10, group = "DCA settings")
priceDeviationPercForSO = input.float(1.0, title='Percentage deviation to open Safety Orders', minval=0.0, step=0.1, group = "DCA settings") / 100
safetyOrderAmount = input.float(100, title='Safety Order SIze', minval=0.0, step= 10, group = "DCA settings")
soVolumeScale = input.float(1.1, step=0.1, title='Safety Order Volume Scale', minval=0.1, group = "DCA settings")
soStepScale = input.float(1, step=0.1, title='Safety Order Step Scale', minval=0.1, group = "DCA settings")
maxSafetyOrders = input.int(5, title='Max Safety Orders', minval=0, group = "DCA settings")

highlightVWAPclose= input.bool(title="Highlight VWAP candle opens", defval=false, group = "Other settings", tooltip = "Highlight the opening of every VWAP timeframe candle")
plotPB = input.bool(false," Show Pullback lines", group = "Other settings", tooltip ="Aqua colored line represent pullback target price for longs while the purple does so for shorts" )
plotVWAP = input.bool(true," Show VWAP bands", group = "Other settings", tooltip ="Red line represents VWAP while the green lines represent upper and lower VWAP bands" )
plotAvgBuy = input.bool(true," Show average buy price for DCA", group = "Other settings", tooltip ="Yellow colored line represents average buy price for DCA orders")

fromMonth = input.int(defval=10, title='From Month', minval=1, maxval=12, group = "Backtesting range")
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, group = "Backtesting range")
fromYear = input(defval=2022, title='From Year', group = "Backtesting range")
toMonth = input.int(defval=1, title='To Month', minval=1, maxval=12, group = "Backtesting range")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group = "Backtesting range")
toYear = input(defval=2200, title='To Year', group = "Backtesting range")
startBacktest = timestamp(fromYear, fromMonth, fromDay, 00, 00)
finishBacktest = timestamp(toYear, toMonth, toDay, 23, 59)  
withinBacktestWindow = time >= startBacktest and time <= finishBacktest ? true : false 

// Alerts
uuidSymbol = syminfo.ticker
if str.endswith(uuidSymbol, ".P")
    uuidSymbol := str.replace(uuidSymbol, ".P","")
else if str.endswith(syminfo.ticker, "PERP")  
    uuidSymbol := str.replace(uuidSymbol, "PERP","")
longEntryAlert = '{"cmd":"OPEN","uuid":"'+ uuid +'","symbol":"'+ uuidSymbol +'","side":"BUY"}'
shortEntryAlert = '{"cmd":"OPEN","uuid":"'+ uuid +'","symbol":"'+ uuidSymbol +'","side":"SELL"}'

// Calculations
// lowPB = request.security(syminfo.tickerid, pullback_timeframe, low)
// highPB = request.security(syminfo.tickerid, pullback_timeframe, high)
// closePB = request.security(syminfo.tickerid, pullback_timeframe, close)
pullbackshort = ta.highest(high,PBperiod)*(1-pullback_percentage)
pullbacklong = ta.lowest(low,PBperiod)*(1+pullback_percentage)
longsl=strategy.position_avg_price*(1-sl)
longtp=strategy.position_avg_price*(1+tp)
shortsl=strategy.position_avg_price*(1+sl)
shorttp=strategy.position_avg_price*(1-tp)
float avgBuyPrice = 0

vwap_period1 = if timeframe.isminutes
    vwap_period*(timeframe.in_seconds(vwap_timeframe)/(timeframe.multiplier*60))
else if timeframe.isseconds
    vwap_period*(timeframe.in_seconds(vwap_timeframe)/(timeframe.multiplier))
else
    1

vwap1 = ta.vwma(hlc3,vwap_period1)
upper_band = vwap1*(1+upper_band_percentage)
lower_band = vwap1*(1-lower_band_percentage)

// Plotings
float pPBs = na
float pPBl = na
if plotPB
    pPBs:= pullbackshort 
    pPBl:= pullbacklong 
float pVWAP = na
float pVWAPu = na
float pVWAPl = na
if plotVWAP 
    pVWAP:= vwap1 
    pVWAPu:= upper_band 
    pVWAPl:= lower_band 
newVWAPcandle=false
color bgcolor1 = na
if highlightVWAPclose
    newVWAPcandle := timeframe.change(vwap_timeframe)
    bgcolor1 := newVWAPcandle ? color(color.rgb(54, 64, 81, 61)) : na
plot(pVWAP, title = "VWAP", color=color.red, linewidth=1) 
plot(pVWAPu, title = "VWAP upper band", color=color.green, linewidth=1)
plot(pVWAPl, title = "VWAP lower band", color=color.green, linewidth=1)
plot(pPBs, title = "VWAP pullback short", color=color.fuchsia, linewidth=1)
plot(pPBl, title = "VWAP pullback long", color=color.aqua, linewidth=1)
bgcolor(bgcolor1)


// Logic
if isDCAactive
    var currentSoNumber = 0
    var initialOrderPrice = 0.0
    currentSoNumber := strategy.position_size == 0.0? 0:currentSoNumber

    // Base Order Short
    if ShortTradesActive? strategy.position_size == 0 and withinBacktestWindow and high > upper_band and close < pullbackshort and (PBcloseStillAboveShortBand? close > upper_band : true) : false
        strategy.entry(id = 'S', comment='BO', direction= strategy.short, qty=baseOrderAmount, alert_message = shortEntryAlert)
        initialOrderPrice := close
        currentSoNumber := 1

    nextStepShort = 0.0
    if soStepScale == 1.0
        nextStepShort := initialOrderPrice + initialOrderPrice * priceDeviationPercForSO * soStepScale * currentSoNumber
    else
        nextStepShort := initialOrderPrice + initialOrderPrice * ((priceDeviationPercForSO * math.pow(soStepScale, currentSoNumber) - priceDeviationPercForSO) / (soStepScale - 1))

    // DCA Short
    if currentSoNumber > 0 and close >= nextStepShort and currentSoNumber <= maxSafetyOrders and strategy.position_size < 0
        strategy.entry(id= 'S', comment='SO ' + str.tostring(currentSoNumber), direction=strategy.short, qty=safetyOrderAmount * math.pow(soVolumeScale, currentSoNumber - 1), alert_message = shortEntryAlert)
        currentSoNumber += 1

    strategy.exit(id="S", stop=shortsl, limit=shorttp, comment_profit = "S tp", comment_loss = "S sl")

    // Base Order Long
    if LongTradesActive? strategy.position_size == 0 and withinBacktestWindow and low < lower_band and close > pullbacklong and (PBcloseStillBelowLongBand? close < lower_band : true) : false
        strategy.entry(id = 'L', comment='BO', direction= strategy.long, qty=baseOrderAmount, alert_message = longEntryAlert)
        initialOrderPrice := close
        currentSoNumber := 1

    nextStepLong = 0.0
    if soStepScale == 1.0
        nextStepLong := initialOrderPrice - initialOrderPrice * priceDeviationPercForSO * soStepScale * currentSoNumber
    else
        nextStepLong := initialOrderPrice - initialOrderPrice * ((priceDeviationPercForSO * math.pow(soStepScale, currentSoNumber) - priceDeviationPercForSO) / (soStepScale - 1))

    // DCA Long
    if currentSoNumber > 0 and close <= nextStepLong and currentSoNumber <= maxSafetyOrders and strategy.position_size > 0
        strategy.entry(id= 'L', comment='SO ' + str.tostring(currentSoNumber), direction=strategy.long, qty=safetyOrderAmount * math.pow(soVolumeScale, currentSoNumber - 1), alert_message = longEntryAlert)
        currentSoNumber += 1

    strategy.exit(id="L", stop=longsl, limit=longtp, comment_profit = "L tp", comment_loss = "L sl")

    avgBuyPrice := strategy.position_avg_price

else
    //Non-DCA Entry Conditions
    if ShortTradesActive? high > upper_band and close < pullbackshort and (PBcloseStillAboveShortBand? close > upper_band : true) and withinBacktestWindow and strategy.position_size == 0 : false
        strategy.entry("S", strategy.short, qty = baseOrderAmount, alert_message = shortEntryAlert)
    strategy.exit(id="S", stop=shortsl, limit=shorttp, comment_profit = "S tp", comment_loss = "S sl")

    if LongTradesActive? low < lower_band and close > pullbacklong and (PBcloseStillBelowLongBand? close < lower_band : true) and withinBacktestWindow and strategy.position_size == 0 : false
        strategy.entry("L", strategy.long, qty = baseOrderAmount, alert_message = longEntryAlert)
    strategy.exit(id="L", stop=longsl, limit=longtp, comment_profit = "L tp", comment_loss = "L sl")

    avgBuyPrice := na

// Some ending calculations
float pAvg = na
if plotAvgBuy
    pAvg:= avgBuyPrice 
plot(pAvg, title = "avg p", color=color.yellow, linewidth=1, style= plot.style_linebr)
var msgs = table.new(position.top_right, 2, 10, frame_color=color.black)
slShould = 0.0
if soStepScale == 1.0
    slShould := 100 * priceDeviationPercForSO * soStepScale * maxSafetyOrders
else
    slShould := 100 * ((priceDeviationPercForSO * math.pow(soStepScale, maxSafetyOrders) - priceDeviationPercForSO) / (soStepScale - 1))
if sl<slShould/100 and isDCAactive
    table.cell(msgs, 1,1, "Stop loss should be set greater than " + str.tostring(slShould) + "\n according to the number of safety orders set up", text_size=size.auto, text_halign=text.align_right, text_color = color.rgb(85, 85, 85)) 




